/**
 * Component dependencies
 */
const React = require('react');
const PropTypes = require('prop-types');
const classNames = require('classnames');

/**
 * Button text component
 *  Utility component only to be used when Button content
 *  includes more than just text (could be an icon or spinner)
 */

const ButtonText = ({ children }) => (
  <span
    className="andes-button__text"
  >{children}</span>
);

ButtonText.propTypes = {
  children: PropTypes.node.isRequired,
};

/**
 * Button component
 */
const Button = ({
  className,
  children,
  size,
  modifier,
  href,
  type,
  disabled,
  loading,
  onClick,
  ...props
}) => {
  const isDisabled = disabled || loading;

  const classes = classNames(
    'andes-button',
    `andes-button--${modifier}`,
    className,
    size === 'small' && 'andes-button--small',
    isDisabled && 'andes-button--disabled',
  );

  const sharedProps = {
    className: classes,
    disabled: isDisabled,
    onClick,
    ...props,
  };

  const content = (
    <span
      className="andes-button__content"
    >
      {children}
    </span>
  );

  return href ? (
    <a
      role="button"
      href={href}
      {...sharedProps}
      onClick={onClick}
    >{content}</a>
  ) : (
    <button
      type={type}
      {...sharedProps}
      onClick={onClick}
    >{content}</button>
  );
};

/**
 * Prop types
 */
Button.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  href: PropTypes.string,
  loading: PropTypes.bool,
  modifier: PropTypes.oneOf([
    'filled',
    'outline',
    'transparent',
    'white',
    'link',
  ]),
  size: PropTypes.oneOf([
    'small',
    'large',
  ]),
  type: PropTypes.string,
  onClick: PropTypes.func,
};

Button.defaultProps = {
  className: '',
  disabled: false,
  href: '',
  loading: false,
  modifier: 'filled',
  size: 'large',
  type: 'button',
  onClick: null,
};

/**
 * Export both components
 */
module.exports = {
  Button,
  ButtonText,
};
