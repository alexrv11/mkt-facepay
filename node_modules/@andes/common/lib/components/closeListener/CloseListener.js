/* global document */
/**
* Module dependencies
*/
const React = require('react');
const PropTypes = require('prop-types');

/**
* Components
*/
class CloseListener extends React.Component {
  constructor(props) {
    super(props);
    this.handleRef = this.handleRef.bind(this);
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.pressEscToClose = this.pressEscToClose.bind(this);
  }

  componentDidMount() {
    document.addEventListener('click', this.handleDocumentClick);
    document.addEventListener('keydown', this.pressEscToClose, false);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.handleDocumentClick);
    document.removeEventListener('keydown', this.pressEscToClose, false);
  }

  pressEscToClose(event) {
    if (this.props.handleEsc) {
      if (event.keyCode === 27) { // esc key
        this.props.onCloseOutside(event);
      }
    }
  }

  handleDocumentClick(event) {
    if (this.props.handleClick) {
      if (this.element && !this.element.contains(event.target)) {
        this.props.onCloseOutside(event);
      }
    }
  }

  handleRef(el) {
    const { children } = this.props;
    this.element = el;
    if (children.ref && typeof children.ref === 'function') {
      children.ref(el);
    }
  }

  render() {
    return React.cloneElement(this.props.children, {
      ref: this.handleRef,
    });
  }
}


CloseListener.propTypes = {
  children: PropTypes.element.isRequired,
  onCloseOutside: PropTypes.func.isRequired,
  handleClick: PropTypes.bool,
  handleEsc: PropTypes.bool,
};

CloseListener.defaultProps = {
  handleClick: true,
  handleEsc: true,
};


/**
* Expose Component
*/
module.exports = CloseListener;
