/* eslint-disable jsx-a11y/label-has-for */

/**
 * Component dependencies
 */
const React = require('react');
const PropTypes = require('prop-types');
const classNames = require('classnames');

const TextField = require('./TextField');

const DEFAULT_FOCUS_INDEX = 0;
const BACKSPACE_ASCII = 8;
const numbers = '0123456789';

/**
 * Numeric
 */
const numericNamespace = 'andes-form-control--numeric';
const namespace = 'andes-form-control';

const getFocusIndexOrFalsy = focus => (focus === false ? false : Number(focus === true ? DEFAULT_FOCUS_INDEX : focus));

class Numeric extends React.Component {
  constructor(props) {
    super(props);

    const defaultValues = [];
    for (let i = 0; i < props.digits; i += 1) {
      defaultValues.push('');
    }

    const value = props.value || defaultValues;

    this.state = {
      value,
      focus: getFocusIndexOrFalsy(props.focus),
    };

    this.onChangeHandle = this.onChangeHandle.bind(this);
    this.onKeyDownHandle = this.onKeyDownHandle.bind(this);
    this.onFocusHandle = this.onFocusHandle.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.focus !== nextProps.focus) {
      this.setState({
        focus: getFocusIndexOrFalsy(nextProps.focus),
      });
    }
  }

  onInputHandle(value, index) {
    if ((numbers.indexOf(value) < 0) || value.length > 1) {
      return;
    }
    if (value.trim() !== '') {
      this.nextFocus(index);
    }
  }

  onChangeHandle(event, index) {
    const newValue = this.state.value;
    const eventValue = event.target.value;
    if (numbers.indexOf(eventValue) < 0 || eventValue.length > 1) {
      return;
    }
    newValue[index] = eventValue;
    this.setState({
      value: newValue,
    });
    this.props.onChange(newValue);
  }

  onKeyDownHandle(event, index) {
    const eventValue = event.target.value;
    if (event.keyCode === BACKSPACE_ASCII || event.key === 'Backspace') {
      if (eventValue === '') {
        this.backFocus(index);
      }
    }
  }

  onFocusHandle(event, index) {
    this.setState({
      focus: index,
    });
  }

  backFocus(focus) {
    const nexFocus = focus - 1;
    this.setState({
      focus: nexFocus,
    });
  }

  nextFocus(focus) {
    const nexFocus = focus + 1;
    this.setState({
      focus: nexFocus,
    });
  }

  render() {
    const {
      className,
      digits,
      disabled,
      modifier,
      messageShow,
      message,
      messageFixed,
      centered,
    } = this.props;

    const classes = classNames(
      numericNamespace,
      className,
      modifier !== 'default' && `${namespace}--${modifier}`,
      centered && `${namespace}--centered`,
    );

    const classesWrapper = classNames(
      numericNamespace,
      `${numericNamespace}-wrapper`,
    );

    const messageClass = classNames(
      `${namespace}__message`,
      messageFixed && `${namespace}__message-fixed`,
    );

    const fieldProps = {
      disabled,
    };

    return (
      <div className={classes}>
        <div className={classesWrapper}>
          {
            [...Array(digits)].map((i, key) => (
              <TextField
                key={key.toString()}
                focus={key === this.state.focus}
                select={key === this.state.focus}
                centered
                type="number"
                pattern="[0-9]*"
                value={this.state.value[key]}
                maxLength={1}
                onChange={e => this.onChangeHandle(e, key)}
                onInput={value => this.onInputHandle(value, key)}
                onKeyDown={e => this.onKeyDownHandle(e, key)}
                onFocus={e => this.onFocusHandle(e, key)}
                modifier={modifier}
                {...fieldProps}
              />))
          }
        </div>
        {messageShow && <span className={messageClass}>{message}</span>}
      </div>
    );
  }
}

/**
 * Prop types
 */
Numeric.propTypes = {
  focus: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
  className: PropTypes.string,
  digits: PropTypes.number,
  value: PropTypes.oneOfType([
    PropTypes.arrayOf(
      PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string,
      ]),
    ),
    PropTypes.string,
  ]),
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  modifier: PropTypes.oneOf(['indeterminate', 'completed', 'error', 'default']),
  message: PropTypes.string,
  messageShow: PropTypes.bool,
  messageFixed: PropTypes.bool,
  centered: PropTypes.bool,
};

Numeric.defaultProps = {
  className: '',
  digits: 1,
  value: null,
  onChange: () => {},
  disabled: false,
  modifier: 'default',
  message: null,
  messageFixed: false,
  messageShow: true,
  centered: false,
  focus: DEFAULT_FOCUS_INDEX,
};

/**
 * Export component
 */
module.exports = Numeric;
