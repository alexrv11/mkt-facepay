/* eslint-disable jsx-a11y/label-has-for */

/**
 * Component dependencies
 */
const React = require('react');
const PropTypes = require('prop-types');
const classNames = require('classnames');
const handlers = require('./scripts/handlers');

/**
 * Password
 */

const namespace = 'andes-form-control';

class Password extends React.Component {
  constructor(props) {
    super(props);

    this.setField = this.setField.bind(this);
    this.setContainer = this.setContainer.bind(this);
    this.setPassValue = this.setPassValue.bind(this);
    this.onBlurHandler = this.onBlurHandler.bind(this);
    this.onFocusHandler = this.onFocusHandler.bind(this);
    this.onChangeHandler = this.onChangeHandler.bind(this);
    this.onClickShowPassword = this.onClickShowPassword.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      this.setState({ value: nextProps.value });
    }
  }

  onBlurHandler(event) {
    handlers.onBlur(this.container, this.field.value);
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }
  }

  onFocusHandler(event) {
    handlers.onFocus(this.container);
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }
  }

  onChangeHandler(event) {
    const value = event.target.value;
    if (this.props.showHide) {
      handlers.onChange(this.pass, value);
    }
    if (this.props.onChange) {
      this.props.onChange(event);
    }
  }

  onClickShowPassword(e) {
    handlers.onClickShowPassword(this.pass, e.target);

    if (this.props.onClickShowPassword) {
      this.props.onClickShowPassword();
    }
  }

  setField(field) {
    this.field = field;
  }

  setContainer(container) {
    this.container = container;
  }

  setPassValue(pass) {
    this.pass = pass;
  }

  render() {
    const {
      className,
      message,
      messageShow,
      label,
      maxLength,
      modifier,
      showLabel,
      hideLabel,
      showHide,
      show,
      autoFocus,
      onClickShowPassword,
      ...inputProps
    } = this.props;

    const classes = classNames(
      namespace,
      `${namespace}--textfield`,
      showHide && `${namespace}--password`,
      autoFocus && `${namespace}--focused`,
      autoFocus && `${namespace}--floated`,
      modifier && modifier !== 'default' && `${namespace}--${modifier}`,
      className,
    );

    const fieldProps = {
      ...inputProps,
      type: 'password',
      className: `${namespace}__field`,
      maxLength,
      autoFocus,
      onBlur: this.onBlurHandler,
      onFocus: this.onFocusHandler,
      onChange: this.onChangeHandler,
      ref: this.setField,
    };

    const passwordClasses = classNames(
      `${namespace}__password-value`,
      !show && 'hide',
    );

    return (
      <label className={classes} ref={this.setContainer} >
        <div className={`${namespace}__control`}>
          {label && <span className={`${namespace}__label`}>{label}</span>}
          <input key="field" {...fieldProps} />
          {showHide &&
            <div className={`${namespace}__password-embedded`}>
              <span
                role="button"
                tabIndex={0}
                onClick={this.onClickShowPassword}
                className={`${namespace}__password-link`}
                data-show={this.props.show}
                data-show-label={this.props.showLabel}
                data-hide-label={this.props.hideLabel}
                ref={(element) => {
                  this.label = element;
                }}
              >
                {this.props.show ? this.props.hideLabel : this.props.showLabel}
              </span>
            </div>
          }
        </div>
        <div className={`${namespace}__border`} />
        {messageShow &&
          <span className={`${namespace}__message`}>
            <span className={`${namespace}__message-text`}>{message}</span>
            {showHide &&
              <span ref={this.setPassValue} className={passwordClasses}>{this.props.value}</span>}
          </span>
        }
      </label>
    );
  }
}

/**
 * Prop types
 */
Password.propTypes = {
  autoFocus: PropTypes.bool,
  className: PropTypes.string,
  value: PropTypes.oneOfType([
    PropTypes.number,
    PropTypes.string,
  ]),
  placeholder: PropTypes.string,
  message: PropTypes.oneOfType([
    PropTypes.node,
    PropTypes.string,
  ]),
  messageShow: PropTypes.bool,
  label: PropTypes.string,
  maxLength: PropTypes.oneOfType([
    PropTypes.number,
    PropTypes.string,
  ]),
  onChange: PropTypes.func,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onClickShowPassword: PropTypes.func,
  modifier: PropTypes.oneOf(['indeterminate', 'completed', 'error', 'default']),
  showLabel: PropTypes.string,
  hideLabel: PropTypes.string,
  showHide: PropTypes.bool,
  show: PropTypes.bool,
};

Password.defaultProps = {
  autoFocus: false,
  className: '',
  value: undefined,
  placeholder: null,
  disabled: false,
  message: null,
  messageShow: false,
  label: null,
  maxLength: 120,
  onChange: null,
  onBlur: null,
  onFocus: null,
  modifier: 'default',
  showLabel: '',
  hideLabel: '',
  showHide: false,
  show: false,
  onClickShowPassword: null,
};

/**
 * Export component
 */
module.exports = Password;
