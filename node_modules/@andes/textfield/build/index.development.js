module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 136);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),

/***/ 136:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(137);


/***/ }),

/***/ 137:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var TextField = __webpack_require__(41);
var Numeric = __webpack_require__(140);
var Password = __webpack_require__(141);

module.exports = TextField;
module.exports.Numeric = Numeric;
module.exports.Password = Password;

/***/ }),

/***/ 138:
/***/ (function(module, exports) {

module.exports = require("autosize");

/***/ }),

/***/ 139:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var React = __webpack_require__(0);
var PropTypes = __webpack_require__(1);

var _ref = React.createElement('path', { fill: 'none', stroke: '#39B54A', strokeWidth: '1.5', d: 'M3 7.193L6.523 11 13 4' });

function ValidatedIcon(props) {
  return React.createElement(
    'svg',
    { className: props.namespace + '---validated-icon pepe', width: '18', height: '16' },
    _ref
  );
}

ValidatedIcon.propTypes = {
  namespace: PropTypes.string.isRequired
};

module.exports = ValidatedIcon;

/***/ }),

/***/ 140:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/label-has-for */

/**
 * Component dependencies
 */
var React = __webpack_require__(0);
var PropTypes = __webpack_require__(1);
var classNames = __webpack_require__(2);

var TextField = __webpack_require__(41);

var DEFAULT_FOCUS_INDEX = 0;
var BACKSPACE_ASCII = 8;
var numbers = '0123456789';

/**
 * Numeric
 */
var numericNamespace = 'andes-form-control--numeric';
var namespace = 'andes-form-control';

var getFocusIndexOrFalsy = function getFocusIndexOrFalsy(focus) {
  return focus === false ? false : Number(focus === true ? DEFAULT_FOCUS_INDEX : focus);
};

var Numeric = function (_React$Component) {
  _inherits(Numeric, _React$Component);

  function Numeric(props) {
    _classCallCheck(this, Numeric);

    var _this = _possibleConstructorReturn(this, (Numeric.__proto__ || Object.getPrototypeOf(Numeric)).call(this, props));

    var defaultValues = [];
    for (var i = 0; i < props.digits; i += 1) {
      defaultValues.push('');
    }

    var value = props.value || defaultValues;

    _this.state = {
      value: value,
      focus: getFocusIndexOrFalsy(props.focus)
    };

    _this.onChangeHandle = _this.onChangeHandle.bind(_this);
    _this.onKeyDownHandle = _this.onKeyDownHandle.bind(_this);
    _this.onFocusHandle = _this.onFocusHandle.bind(_this);
    return _this;
  }

  _createClass(Numeric, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.focus !== nextProps.focus) {
        this.setState({
          focus: getFocusIndexOrFalsy(nextProps.focus)
        });
      }
    }
  }, {
    key: 'onInputHandle',
    value: function onInputHandle(value, index) {
      if (numbers.indexOf(value) < 0 || value.length > 1) {
        return;
      }
      if (value.trim() !== '') {
        this.nextFocus(index);
      }
    }
  }, {
    key: 'onChangeHandle',
    value: function onChangeHandle(event, index) {
      var newValue = this.state.value;
      var eventValue = event.target.value;
      if (numbers.indexOf(eventValue) < 0 || eventValue.length > 1) {
        return;
      }
      newValue[index] = eventValue;
      this.setState({
        value: newValue
      });
      this.props.onChange(newValue);
    }
  }, {
    key: 'onKeyDownHandle',
    value: function onKeyDownHandle(event, index) {
      var eventValue = event.target.value;
      if (event.keyCode === BACKSPACE_ASCII || event.key === 'Backspace') {
        if (eventValue === '') {
          this.backFocus(index);
        }
      }
    }
  }, {
    key: 'onFocusHandle',
    value: function onFocusHandle(event, index) {
      this.setState({
        focus: index
      });
    }
  }, {
    key: 'backFocus',
    value: function backFocus(focus) {
      var nexFocus = focus - 1;
      this.setState({
        focus: nexFocus
      });
    }
  }, {
    key: 'nextFocus',
    value: function nextFocus(focus) {
      var nexFocus = focus + 1;
      this.setState({
        focus: nexFocus
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          digits = _props.digits,
          disabled = _props.disabled,
          modifier = _props.modifier,
          messageShow = _props.messageShow,
          message = _props.message,
          messageFixed = _props.messageFixed,
          centered = _props.centered;


      var classes = classNames(numericNamespace, className, modifier !== 'default' && namespace + '--' + modifier, centered && namespace + '--centered');

      var classesWrapper = classNames(numericNamespace, numericNamespace + '-wrapper');

      var messageClass = classNames(namespace + '__message', messageFixed && namespace + '__message-fixed');

      var fieldProps = {
        disabled: disabled
      };

      return React.createElement(
        'div',
        { className: classes },
        React.createElement(
          'div',
          { className: classesWrapper },
          [].concat(_toConsumableArray(Array(digits))).map(function (i, key) {
            return React.createElement(TextField, _extends({
              key: key.toString(),
              focus: key === _this2.state.focus,
              select: key === _this2.state.focus,
              centered: true,
              type: 'number',
              pattern: '[0-9]*',
              value: _this2.state.value[key],
              maxLength: 1,
              onChange: function onChange(e) {
                return _this2.onChangeHandle(e, key);
              },
              onInput: function onInput(value) {
                return _this2.onInputHandle(value, key);
              },
              onKeyDown: function onKeyDown(e) {
                return _this2.onKeyDownHandle(e, key);
              },
              onFocus: function onFocus(e) {
                return _this2.onFocusHandle(e, key);
              },
              modifier: modifier
            }, fieldProps));
          })
        ),
        messageShow && React.createElement(
          'span',
          { className: messageClass },
          message
        )
      );
    }
  }]);

  return Numeric;
}(React.Component);

/**
 * Prop types
 */


Numeric.propTypes = {
  focus: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
  className: PropTypes.string,
  digits: PropTypes.number,
  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.string]),
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  modifier: PropTypes.oneOf(['indeterminate', 'completed', 'error', 'default']),
  message: PropTypes.string,
  messageShow: PropTypes.bool,
  messageFixed: PropTypes.bool,
  centered: PropTypes.bool
};

Numeric.defaultProps = {
  className: '',
  digits: 1,
  value: null,
  onChange: function onChange() {},
  disabled: false,
  modifier: 'default',
  message: null,
  messageFixed: false,
  messageShow: true,
  centered: false,
  focus: DEFAULT_FOCUS_INDEX
};

/**
 * Export component
 */
module.exports = Numeric;

/***/ }),

/***/ 141:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/label-has-for */

/**
 * Component dependencies
 */
var React = __webpack_require__(0);
var PropTypes = __webpack_require__(1);
var classNames = __webpack_require__(2);
var handlers = __webpack_require__(34);

/**
 * Password
 */

var namespace = 'andes-form-control';

var Password = function (_React$Component) {
  _inherits(Password, _React$Component);

  function Password(props) {
    _classCallCheck(this, Password);

    var _this = _possibleConstructorReturn(this, (Password.__proto__ || Object.getPrototypeOf(Password)).call(this, props));

    _this.setField = _this.setField.bind(_this);
    _this.setContainer = _this.setContainer.bind(_this);
    _this.setPassValue = _this.setPassValue.bind(_this);
    _this.onBlurHandler = _this.onBlurHandler.bind(_this);
    _this.onFocusHandler = _this.onFocusHandler.bind(_this);
    _this.onChangeHandler = _this.onChangeHandler.bind(_this);
    _this.onClickShowPassword = _this.onClickShowPassword.bind(_this);
    return _this;
  }

  _createClass(Password, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.props.value) {
        this.setState({ value: nextProps.value });
      }
    }
  }, {
    key: 'onBlurHandler',
    value: function onBlurHandler(event) {
      handlers.onBlur(this.container, this.field.value);
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: 'onFocusHandler',
    value: function onFocusHandler(event) {
      handlers.onFocus(this.container);
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: 'onChangeHandler',
    value: function onChangeHandler(event) {
      var value = event.target.value;
      if (this.props.showHide) {
        handlers.onChange(this.pass, value);
      }
      if (this.props.onChange) {
        this.props.onChange(event);
      }
    }
  }, {
    key: 'onClickShowPassword',
    value: function onClickShowPassword(e) {
      handlers.onClickShowPassword(this.pass, e.target);

      if (this.props.onClickShowPassword) {
        this.props.onClickShowPassword();
      }
    }
  }, {
    key: 'setField',
    value: function setField(field) {
      this.field = field;
    }
  }, {
    key: 'setContainer',
    value: function setContainer(container) {
      this.container = container;
    }
  }, {
    key: 'setPassValue',
    value: function setPassValue(pass) {
      this.pass = pass;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          message = _props.message,
          messageShow = _props.messageShow,
          label = _props.label,
          maxLength = _props.maxLength,
          modifier = _props.modifier,
          showLabel = _props.showLabel,
          hideLabel = _props.hideLabel,
          showHide = _props.showHide,
          show = _props.show,
          autoFocus = _props.autoFocus,
          onClickShowPassword = _props.onClickShowPassword,
          inputProps = _objectWithoutProperties(_props, ['className', 'message', 'messageShow', 'label', 'maxLength', 'modifier', 'showLabel', 'hideLabel', 'showHide', 'show', 'autoFocus', 'onClickShowPassword']);

      var classes = classNames(namespace, namespace + '--textfield', showHide && namespace + '--password', autoFocus && namespace + '--focused', autoFocus && namespace + '--floated', modifier && modifier !== 'default' && namespace + '--' + modifier, className);

      var fieldProps = _extends({}, inputProps, {
        type: 'password',
        className: namespace + '__field',
        maxLength: maxLength,
        autoFocus: autoFocus,
        onBlur: this.onBlurHandler,
        onFocus: this.onFocusHandler,
        onChange: this.onChangeHandler,
        ref: this.setField
      });

      var passwordClasses = classNames(namespace + '__password-value', !show && 'hide');

      return React.createElement(
        'label',
        { className: classes, ref: this.setContainer },
        React.createElement(
          'div',
          { className: namespace + '__control' },
          label && React.createElement(
            'span',
            { className: namespace + '__label' },
            label
          ),
          React.createElement('input', _extends({ key: 'field' }, fieldProps)),
          showHide && React.createElement(
            'div',
            { className: namespace + '__password-embedded' },
            React.createElement(
              'span',
              {
                role: 'button',
                tabIndex: 0,
                onClick: this.onClickShowPassword,
                className: namespace + '__password-link',
                'data-show': this.props.show,
                'data-show-label': this.props.showLabel,
                'data-hide-label': this.props.hideLabel,
                ref: function ref(element) {
                  _this2.label = element;
                }
              },
              this.props.show ? this.props.hideLabel : this.props.showLabel
            )
          )
        ),
        React.createElement('div', { className: namespace + '__border' }),
        messageShow && React.createElement(
          'span',
          { className: namespace + '__message' },
          React.createElement(
            'span',
            { className: namespace + '__message-text' },
            message
          ),
          showHide && React.createElement(
            'span',
            { ref: this.setPassValue, className: passwordClasses },
            this.props.value
          )
        )
      );
    }
  }]);

  return Password;
}(React.Component);

/**
 * Prop types
 */


Password.propTypes = {
  autoFocus: PropTypes.bool,
  className: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  placeholder: PropTypes.string,
  message: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
  messageShow: PropTypes.bool,
  label: PropTypes.string,
  maxLength: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onChange: PropTypes.func,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onClickShowPassword: PropTypes.func,
  modifier: PropTypes.oneOf(['indeterminate', 'completed', 'error', 'default']),
  showLabel: PropTypes.string,
  hideLabel: PropTypes.string,
  showHide: PropTypes.bool,
  show: PropTypes.bool
};

Password.defaultProps = {
  autoFocus: false,
  className: '',
  value: undefined,
  placeholder: null,
  disabled: false,
  message: null,
  messageShow: false,
  label: null,
  maxLength: 120,
  onChange: null,
  onBlur: null,
  onFocus: null,
  modifier: 'default',
  showLabel: '',
  hideLabel: '',
  showHide: false,
  show: false,
  onClickShowPassword: null
};

/**
 * Export component
 */
module.exports = Password;

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("classnames");

/***/ }),

/***/ 34:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  onFocus: function onFocus(element) {
    element.classList.add('andes-form-control--focused');
  },
  onBlur: function onBlur(element, value) {
    element.classList.remove('andes-form-control--focused');
    if (value.length) {
      element.classList.add('andes-form-control--floated');
    } else {
      element.classList.remove('andes-form-control--floated');
    }
  },
  onChange: function onChange(element, value) {
    if (element) {
      element.innerHTML = value;
    }
  },
  onClickShowPassword: function onClickShowPassword(password, label) {
    var dataset = label.dataset;
    var show = dataset.show === 'false';
    if (!show) {
      password.classList.add('hide');
    } else {
      password.classList.remove('hide');
    }
    label.innerHTML = show ? dataset.hideLabel : dataset.showLabel;
    label.dataset.show = show;
  }
};

/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = require("@andes/common");

/***/ }),

/***/ 41:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/label-has-for */

/**
 * Component dependencies
 */
var React = __webpack_require__(0);
var PropTypes = __webpack_require__(1);
var classNames = __webpack_require__(2);

var _require = __webpack_require__(4),
    Widther = _require.Widther;

var autosize = __webpack_require__(138);

/**
 * TextField
 */

var ValidatedIcon = __webpack_require__(139);

var namespace = 'andes-form-control';

var _ref = React.createElement(ValidatedIcon, { namespace: namespace });

var TextField = function (_React$Component) {
  _inherits(TextField, _React$Component);

  function TextField(props) {
    _classCallCheck(this, TextField);

    var _this = _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));

    var value = props.defaultValue || props.value;

    _this.state = {
      height: 'auto',
      countdown: (value || '').length,
      focused: props.autoFocus,
      value: value
    };

    _this.setField = _this.setField.bind(_this);
    _this.onBlurHandler = _this.onBlurHandler.bind(_this);
    _this.onFocusHandler = _this.onFocusHandler.bind(_this);
    _this.onInputHandler = _this.onInputHandler.bind(_this);
    _this.onChangeHandler = _this.onChangeHandler.bind(_this);
    return _this;
  }

  _createClass(TextField, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.multiline) {
        autosize(this.field);
      }

      if (this.props.focus) {
        this.field.focus();
      }

      if (this.props.select) {
        this.field.focus();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var field = this.field;

      if (this.props.multiline) {
        autosize.update(field);
      }

      if (nextProps.value !== this.props.value) {
        this.setState({ value: nextProps.value });
      }

      if (nextProps.focus) {
        this.field.focus();
      }

      if (nextProps.select) {
        this.field.select();
      }

      // Count characters
      if (nextProps.countdown && nextProps.value && nextProps.value !== field.value) {
        this.setState({ countdown: nextProps.value.length });
      }
    }
  }, {
    key: 'onBlurHandler',
    value: function onBlurHandler(event) {
      this.setState({ focused: false });
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: 'onFocusHandler',
    value: function onFocusHandler(event) {
      this.setState({ focused: true });
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: 'onInputHandler',
    value: function onInputHandler() {
      var stateChanges = { value: this.field.value };
      // Count characters
      if (this.props.countdown) {
        stateChanges.countdown = this.field.value.length;
      }
      this.setState(stateChanges);

      if (this.props.onInput) {
        this.props.onInput(this.field.value);
      }
    }
  }, {
    key: 'onChangeHandler',
    value: function onChangeHandler(event) {
      this.props.onChange(event);
    }
  }, {
    key: 'setField',
    value: function setField(field) {
      if (this.props.setField) {
        this.props.setField(field);
      }
      this.field = field;
    }
  }, {
    key: 'isEmpty',
    value: function isEmpty(value) {
      return !value && !(value || '').trim();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          countdown = _props.countdown,
          centered = _props.centered,
          disabled = _props.disabled,
          message = _props.message,
          messageShow = _props.messageShow,
          messageFixed = _props.messageFixed,
          label = _props.label,
          labelFixed = _props.labelFixed,
          maxLength = _props.maxLength,
          multiline = _props.multiline,
          prefix = _props.prefix,
          suffix = _props.suffix,
          textbox = _props.textbox,
          children = _props.children,
          modifier = _props.modifier,
          focus = _props.focus,
          select = _props.select,
          setField = _props.setField,
          inputProps = _objectWithoutProperties(_props, ['className', 'countdown', 'centered', 'disabled', 'message', 'messageShow', 'messageFixed', 'label', 'labelFixed', 'maxLength', 'multiline', 'prefix', 'suffix', 'textbox', 'children', 'modifier', 'focus', 'select', 'setField']);

      var floated = this.state.focused || !this.isEmpty(this.props.value) || this.state.value;
      var classes = classNames(namespace, namespace + '--textfield', multiline && namespace + '--multiline', countdown && namespace + '--countdown', centered && namespace + '--centered', this.state.focused && namespace + '--focused', textbox && namespace + '--textbox', modifier !== 'default' && namespace + '--' + modifier, disabled && namespace + '--disabled', floated && namespace + '--floated', className);

      var fieldProps = _extends({}, inputProps, {
        className: namespace + '__field',
        disabled: disabled,
        maxLength: maxLength,
        onBlur: this.onBlurHandler,
        onFocus: this.onFocusHandler,
        onInput: this.onInputHandler,
        onChange: this.props.onChange ? this.onChangeHandler : null,
        style: multiline ? { height: this.state.height } : null,
        ref: this.setField,
        placeholder: floated || !this.props.label || this.props.labelFixed ? this.props.placeholder : null
      });

      var Field = multiline ? 'textarea' : 'input';
      var borderClass = classNames(namespace + '__border');
      var messageClass = classNames(namespace + '__message', messageFixed && namespace + '__message-fixed');
      var labelClass = classNames(namespace + '__label', labelFixed && namespace + '__label-fixed');

      return React.createElement(
        'label',
        { className: classes },
        React.createElement(
          'div',
          { className: namespace + '__control' },
          prefix && floated && React.createElement(
            'span',
            { className: namespace + '__prefix' },
            prefix
          ),
          label && React.createElement(
            'span',
            { className: labelClass },
            label
          ),
          React.createElement(Field, _extends({ key: 'field' }, fieldProps)),
          suffix && floated && React.createElement(
            'span',
            { className: namespace + '__suffix' },
            suffix
          ),
          children && React.createElement(
            'div',
            { className: namespace + '__embedded' },
            ' ',
            children,
            ' '
          )
        ),
        React.createElement('div', { className: borderClass }),
        modifier === 'completed' && _ref,
        messageShow && React.createElement(
          'span',
          { className: messageClass },
          message
        ),
        countdown && React.createElement(
          'span',
          { className: namespace + '__countdown' },
          this.state.countdown,
          ' / ',
          maxLength
        )
      );
    }
  }]);

  return TextField;
}(React.Component);

/**
 * Prop types
 */


TextField.propTypes = {
  autoFocus: PropTypes.bool,
  focus: PropTypes.bool,
  select: PropTypes.bool,
  className: PropTypes.string,
  countdown: PropTypes.bool,
  centered: PropTypes.bool,
  defaultValue: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  placeholder: PropTypes.string,
  disabled: PropTypes.bool,
  message: PropTypes.string,
  messageShow: PropTypes.bool,
  messageFixed: PropTypes.bool,
  label: PropTypes.string,
  labelFixed: PropTypes.bool,
  maxLength: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onChange: PropTypes.func,
  setField: PropTypes.func,
  multiline: PropTypes.bool,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onInput: PropTypes.func,
  prefix: PropTypes.string,
  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  suffix: PropTypes.string,
  textbox: PropTypes.bool,
  children: PropTypes.node,
  modifier: PropTypes.oneOf(['indeterminate', 'completed', 'error', 'default'])
};

TextField.defaultProps = {
  autoFocus: false,
  focus: false,
  className: '',
  countdown: false,
  centered: false,
  defaultValue: undefined,
  value: undefined,
  placeholder: null,
  disabled: false,
  message: null,
  messageFixed: false,
  messageShow: true,
  label: null,
  labelFixed: false,
  maxLength: 120,
  onChange: null,
  setField: null,
  multiline: false,
  onBlur: null,
  onFocus: null,
  prefix: '',
  rows: 1,
  suffix: '',
  textbox: false,
  children: null,
  modifier: 'default',
  select: false,
  onInput: null
};

/**
 * Export component
 */
module.exports = Widther(TextField);

/***/ })

/******/ });